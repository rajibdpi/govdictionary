name: Build and Release Flutter App

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            flutter_path: /opt/hostedtoolcache/flutter
          - os: windows-latest
            flutter_path: ${env:LOCALAPPDATA}\flutter
          - os: macos-latest
            flutter_path: /Users/runner/hostedtoolcache/flutter
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
        
      - name: Run tests
        run: flutter test
      
      # Build for Android (on ubuntu)
      - name: Setup Android SDK
        if: matrix.os == 'ubuntu-latest'
        uses: android-actions/setup-android@v2
        
      - name: Build Android APK
        if: matrix.os == 'ubuntu-latest'
        env:
          ANDROID_SDK_ROOT: ${{ runner.temp }}/android-sdk
          FLUTTER_HOME: ${{ env.FLUTTER_ROOT }}
        run: |
          # Set up Android SDK directory
          mkdir -p $ANDROID_SDK_ROOT
          
          # Accept licenses
          yes | sdkmanager --licenses || true
          
          # Set up Flutter SDK path in local.properties
          mkdir -p android
          echo "flutter.sdk=$FLUTTER_ROOT" > android/local.properties
          echo "sdk.dir=$ANDROID_SDK_ROOT" >> android/local.properties
          
          # Initialize Gradle Wrapper with network retry
          cd android
          if [ ! -f "./gradlew" ]; then
            for i in {1..3}; do
              if gradle wrapper; then
                break
              fi
              echo "Retry $i: Gradle wrapper download failed, retrying..."
              sleep 5
            done
          fi
          chmod +x ./gradlew
          cd ..
          
          # Build with network retry
          for i in {1..3}; do
            if flutter build apk --release; then
              break
            fi
            echo "Retry $i: Build failed, retrying..."
            sleep 10
          done
      
      # Build for iOS (on macOS)
      - name: Build iOS
        if: matrix.os == 'macos-latest'
        run: |
          flutter build ios --release --no-codesign
          
      # Build for Web (on ubuntu)
      - name: Build Web
        if: matrix.os == 'ubuntu-latest'
        run: flutter build web --release
      
      # Build for Windows (on windows)
      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: flutter build windows --release
      
      # Build for macOS (on macOS)
      - name: Build macOS
        if: matrix.os == 'macos-latest'
        run: flutter build macos --release
      
      # Build for Linux (on ubuntu)
      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev
          flutter build linux --release
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: |
            build/app/outputs/flutter-apk/*.apk
            build/ios/iphoneos
            build/web
            build/windows/**/*.exe
            build/macos/Build/Products/Release/*.app
            build/linux/x64/release/bundle

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Extract Changelog
        id: changelog
        run: |
          VERSION=${{ env.VERSION }}
          CHANGELOG_CONTENT=$(awk -v ver="$VERSION" '/^## \[.*\]/ {p=0} /^## \['"$VERSION"'\]/ {p=1;next} p' CHANGELOG.md)
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ env.VERSION }}
          body: |
            ${{ env.CHANGELOG }}
          files: |
            artifacts/**/*.apk
            artifacts/**/*.exe
            artifacts/**/*.app
            artifacts/**/bundle/*
          draft: false
          prerelease: false
